<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Js里的循环</title>
      <link href="/2019/12/31/js-loop/"/>
      <url>/2019/12/31/js-loop/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript里数组循环"><a href="#javascript里数组循环" class="headerlink" title="javascript里数组循环"></a>javascript里数组循环</h2><blockquote><p>重要提示: 对于<code>es6</code>新增的<code>for of</code>，里面可以使用 <code>async/ await</code>,其它几种循环均无法做到。</p></blockquote><h3 id="for-：自定义循环"><a href="#for-：自定义循环" class="headerlink" title="for ：自定义循环"></a><code>for</code> ：自定义循环</h3><blockquote><ul><li>for循环，根据数组的length手动设置循环条件</li></ul></blockquote><pre><code class="javascript">var array = [1,2,3,4,5];for (var i = 0; i &lt; array.length; i++) {     console.log(i,array[i]);}/*output*//*  0 1  1 2  2 3  3 4  4 5*/</code></pre><h3 id="for-in-：循环索引"><a href="#for-in-：循环索引" class="headerlink" title="for in ：循环索引"></a><code>for in</code> ：循环索引</h3><blockquote><ul><li><code>for in</code> 算是最常用的循环方式</li></ul></blockquote><pre><code class="javascript">var array = [1,2,3,4,5];for(let i in array) {    console.log(i,array[i]); };/*output*//*  0 1  1 2  2 3  3 4  4 5*/</code></pre><h3 id="forEach-：循环索引及值"><a href="#forEach-：循环索引及值" class="headerlink" title="forEach ：循环索引及值"></a><code>forEach</code> ：循环索引及值</h3><blockquote><ul><li><code>array.forEach</code> 的用法： <code>array.forEach(function(currentValue, index, arr), thisValue)</code></li><li>其中 <code>thisValue</code> 为回调函数里的 <code>this</code> 指向</li></ul></blockquote><pre><code class="javascript">var array = [1,2,3,4,5];array.forEach((item,index,arr)=&gt;{  console.log(index,item)})/*output*//*  0 1  1 2  2 3  3 4  4 5*/</code></pre><h3 id="for-of-：循环值"><a href="#for-of-：循环值" class="headerlink" title="for of ：循环值"></a><code>for of</code> ：循环值</h3><blockquote><ul><li>for of循环为 <code>es6</code> 的新增循环方法，如下代码，注意输出结果对比和 <code>for in</code> 的不同</li></ul></blockquote><pre><code class="javascript">var array = [1,2,3,4,5];for(let i of array){  console.log(i)}/*output其中i直接输出的是数组的值,而不是数组下标*//*  1  2  3  4  5*/</code></pre><h3 id="array-map-：循环时，依次修改数组"><a href="#array-map-：循环时，依次修改数组" class="headerlink" title="array.map ：循环时，依次修改数组"></a><code>array.map</code> ：循环时，依次修改数组</h3><blockquote><ul><li><code>array.map</code> 的用法： <code>array.map(function(item, index, arr), thisValue)</code> , 可以看出和array.forEach非常相似，但不同的是array.forEach只是个循环，没有返回值，而array.map在循环的时候需要指定返回值，也就是说修改在循环的过程中修改array里本次循环的 <code>value</code> 值，看下面实例，估计能更好懂一些</li><li>简单来说， <code>array.map</code> 方法可以修改一个数组每一项的值，并 <code>返回一个新数组</code></li></ul></blockquote><pre><code class="javascript">var array = [1, 4, 9, 16];// pass a function to mapconst map = array.map(function(item){return item*2});console.log(map);// output: [2, 8, 18, 32]</code></pre><h3 id="array-filter-：循环时，过滤出自己需要的值"><a href="#array-filter-：循环时，过滤出自己需要的值" class="headerlink" title="array.filter ：循环时，过滤出自己需要的值"></a><code>array.filter</code> ：循环时，过滤出自己需要的值</h3><blockquote><ul><li>array.filter的用法： <code>array.filter(function(item, index, arr), thisValue)</code> ,其用法和 <code>forEach</code> &amp; <code>map</code> 一样，但其作用是在循环的过程中过滤掉出数组中我们需要的数据，并 <code>返回过滤后的新数组</code></li></ul></blockquote><pre><code class="javascript">var array = [1,4,9,16];const filter = array.filter(function(item,index,arr){  return item&gt;=9; // 如果item大于或等于9，则返回true})console.log(filter);// output: [9,16] 得到数组里大于或等于9的新数组</code></pre><h3 id="小结Tips"><a href="#小结Tips" class="headerlink" title="小结Tips"></a><code>小结Tips</code></h3><p>对于js中需要掌握的循环基本就上面5种，当然还有一些其他的，但确实不常用</p><p>主要还是要区别下各自的使用场景：其中 <code>forEach</code> 、 <code>map</code> 、 <code>filter</code> ,这三个是 <code>用法一样，但功能不一样</code></p><p>而 <code>forEach</code> 和 <code>for in</code> ，两个都是 <code>用法不一样，但功能一样</code> ,但即便功能一样，也有不同点，如下说明：</p><blockquote><ol><li>首先 <code>for in</code> 的循环顺序是依赖于环境的，所以它循环一个数组，不一定是按照顺序依次循环，而 <code>forEach</code> 可以避免这个问题</li><li>还有一个就是循环里包含异步执行问题，请看下面代码，注意输出结果上的区别</li></ol></blockquote><pre><code class="javascript">let arr = [1,2,3,4,5]for(var i in arr){  setTimeout(()=&gt;{console.log(`delay-i:${i}`)},0)}/*output 如下结果会发现输出的都是4，这并不是我们想要的，当然这个问题也可以使用es6的let来解决，将for里的var改成let即可*//*  delay-i:4  delay-i:4  delay-i:4  delay-i:4  delay-i:4*/arr.forEach(function(item,index,arr){  setTimeout(()=&gt;{console.log(`delay-index:${index}`)},0)})/*output*//*  delay-index:0  delay-index:1  delay-index:2  delay-index:3  delay-index:4*/</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> loop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript正则</title>
      <link href="/2019/12/28/js-regexp/"/>
      <url>/2019/12/28/js-regexp/</url>
      
        <content type="html"><![CDATA[<h2 id="正则介绍"><a href="#正则介绍" class="headerlink" title="正则介绍"></a>正则介绍</h2><blockquote><ul><li>js里正则，主要是针对<code>字符串</code>进行的操作处理</li><li>js里正则有两种声明方式：通过<code>RegExp</code>和双斜杠<code>//</code>，如下</li></ul></blockquote><pre><code class="javascript">/ab+c/i; // 方法一new RegExp(&#39;ab+c&#39;, &#39;i&#39;); // 方法二new RegExp(/ab+c/, &#39;i&#39;); // 方法三</code></pre><h2 id="正则规则"><a href="#正则规则" class="headerlink" title="正则规则"></a>正则规则</h2><h3 id="正则里的-修饰符（写在-右边系统定义好的规则）"><a href="#正则里的-修饰符（写在-右边系统定义好的规则）" class="headerlink" title="正则里的 修饰符（写在//右边系统定义好的规则）"></a>正则里的 修饰符（写在//右边系统定义好的规则）</h3><blockquote><ul><li><code>i</code>： 忽略大小写</li><li><code>g</code>：全局匹配;找到所有匹配，而不是在第一个匹配后停止</li><li><code>m</code>：允许多行匹配，如<code>/^abc/</code>匹配字符串以abc开头（忽视单行字符串，还是多行字符串），<code>/^abc/m</code>则是匹配多行字符串，每行开头的<code>abc</code></li></ul></blockquote><hr><h3 id="正则里为中括号-：正则里的中括号表示-区间中的一位"><a href="#正则里为中括号-：正则里的中括号表示-区间中的一位" class="headerlink" title="正则里为中括号[]：正则里的中括号表示 区间中的一位"></a>正则里为<code>中括号[]</code>：正则里的中括号表示 <code>区间中的一位</code></h3><blockquote><ul><li><code>/[2367][abcd]/</code>：<code>第一位</code>表示<code>2367之中</code>的某个数，<code>第二位</code>表示<code>abcd之中</code>的某个值；</li><li><code>/[0-9][0-9A-z]/</code>：<code>第一位</code>表示0到9<code>区间中</code>的某个数，<code>第二位</code>表示数字或字母<code>区间中</code>的某个值</li><li><code>/[^abdf][^1678]/</code>：<code>第一位</code>表示<code>非a或非b或非d或非f之中</code>的某个值，<code>第二位</code>表示<code>非1或非67或非7或非8之中</code>的某个值</li><li>（<code>注意</code>这里<code>/[^a]/</code>和<code>/^a/</code>的区别：中括号<code>里面的^a</code>表示<code>非a</code>，但中括号<code>外面的^</code>则是表示<code>以a开头</code>）</li></ul></blockquote><hr><h3 id="正则中的小括号-表示子表达式-（备注：大括号｛｝在正则里是表示量词，具体查看量词）"><a href="#正则中的小括号-表示子表达式-（备注：大括号｛｝在正则里是表示量词，具体查看量词）" class="headerlink" title="正则中的小括号()表示子表达式,（备注：大括号｛｝在正则里是表示量词，具体查看量词）"></a>正则中的<code>小括号()</code>表示<code>子表达式</code>,（备注：大括号｛｝在正则里是表示量词，具体查看量词）</h3><blockquote><ul><li><code>/(jpg|png|gif|jpeg)/</code>：表示匹配<code>jpg</code>或<code>png</code>或<code>gif</code>或<code>jpeg</code>中的一个</li><li><code>子表达式</code>真正厉害的作用，请查看下方正则的<code>复制</code></li><li>除了<code>复制</code>之外，小括号在正则里还可以<code>群组匹配</code>，见下方  </li></ul></blockquote><hr><h3 id="正则中的元字符（写在-中系统定义好的规则）-和-一样表示区间中的一位"><a href="#正则中的元字符（写在-中系统定义好的规则）-和-一样表示区间中的一位" class="headerlink" title="正则中的元字符（写在//中系统定义好的规则）:和[]一样表示区间中的一位"></a>正则中的<code>元字符</code>（写在<code>//</code>中系统定义好的规则）:和<code>[]</code>一样表示<code>区间中的一位</code></h3><blockquote><ul><li><code>/\w/</code>：<code>\w</code>其实就是系统定义好的<code>区间符</code>和<code>[0-9A-z_]</code>作用一模一样表示<code>0到9</code>及<code>所有字母</code>以及<code>一个下划线</code>之中的某一个值</li><li><code>/\d/</code>：即<code>[0-9]</code>，代表数字</li><li><code>/\s/</code>：空格字符，即<code>[\n\f\r\t\v]</code>匹配字符串中的这些空格符中的一个，如字符串<code>‘hello\nworld’</code>中的<code>\n</code></li><li><code>/\b/</code>：匹配单词边界，如字符串<code>&#39;hello wolrd&#39;</code>中<code>字母w</code>左边便有<code>单词边界</code></li><li><code>/\W/</code>或<code>/\D/</code>：<code>\W</code>即<code>[^\w]</code>；<code>\D</code>即<code>[^\d]</code>也就是<code>非数字</code>，大写均表示<code>非小写功能</code></li><li><code>/./</code>：正则里的<code>.</code>是个特殊<code>元字符</code>，表示出了<code>[\r\n]</code>之外的<code>所有字符中的一个</code></li></ul></blockquote><hr><h3 id="正则中的量词"><a href="#正则中的量词" class="headerlink" title="正则中的量词"></a>正则中的<code>量词</code></h3><blockquote><ul><li><code>+</code>：<code>1到多个</code>的量词，如<code>/a+/</code>,表示匹配<code>1到多个a</code></li></ul></blockquote><pre><code class="javascript">let str = &#39;abaaacccaa&#39;let reg = /a+/gconsole.log(str.match(reg)) // [&quot;a&quot;, &quot;aaa&quot;, &quot;aa&quot;]</code></pre><hr><blockquote><ul><li><code>*</code>：<code>0到多个</code>的量词，如<code>/a*/</code>,表示匹配<code>0到多个a</code></li></ul></blockquote><pre><code class="javascript">let str = &#39;abcabcaabccccaa&#39;let reg = /abc*/gconsole.log(str.match(reg)) // [&quot;abc&quot;, &quot;abc&quot;, &quot;abcccc&quot;]</code></pre><hr><blockquote><ul><li><code>?</code>：<code>0到一个</code>的量词，如<code>/a?/</code>,表示匹配<code>0到一个a</code>(注意<code>？</code>是个很特殊的<code>量词</code>，在有些情况下，它不作量词用，如<code>？</code>用在<code>量词后面</code>则表示进行<code>非贪婪匹配</code>,可以查看后面的<code>正则贪婪模式</code>介绍，再如下面的<code>修饰匹配</code>)</li></ul></blockquote><pre><code class="javascript">let str = &#39;abaaacccaa&#39;let reg = /a?/gconsole.log(str.match(reg)) // [&quot;a&quot;, &quot;&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;a&quot;, &quot;a&quot;, &quot;&quot;]</code></pre><hr><blockquote><ul><li><code>{n}</code>：<code>n个</code>的量词，如<code>/a{2}/</code>，表示匹配<code>2个a</code>，其作用等同于<code>/aa/</code></li></ul></blockquote><pre><code class="javascript">let str = &#39;abaaacccaa&#39;let reg = /a{2}/gconsole.log(str.match(reg)) // [&quot;aa&quot;, &quot;aa&quot;]</code></pre><hr><blockquote><ul><li><code>{n,m}</code>：<code>n到m个</code>的量词，如<code>/a{2,4}/</code>，表示匹配<code>2到4个a</code>（注意，正则会优先匹配<code>4个a</code>，再匹配<code>3个a</code>，再匹配<code>2个a</code>）</li></ul></blockquote><pre><code class="javascript">let str = &#39;abaaaaacccaaaddaa&#39;let reg = /a{2,4}/gconsole.log(str.match(reg)) // [&quot;aaaa&quot;, &quot;aaa&quot;, &quot;aa&quot;]</code></pre><hr><blockquote><ul><li><code>{n,}</code>：<code>至少n个</code>的量词（也是<code>n到多个</code>的量词），如<code>/a{1,}/</code>，就和<code>/a+/</code>的作用一样</li></ul></blockquote><hr><blockquote><ul><li><code>^</code>：<code>以某某开头</code>的量词，如<code>/^abc/</code>, 表示以<code>abc</code>开头</li><li>（<code>注意</code>这里<code>/[^a]/</code>和<code>/^a/</code>的区别：中括号<code>里面的^a</code>表示<code>非a</code>，但中括号<code>外面的^</code>则是表示<code>以a开头</code>）</li></ul></blockquote><pre><code class="javascript">let str = &#39;amabaaaaacccaaaddaa&#39;let reg = /^aba/console.log(reg.test(str)) // false</code></pre><hr><blockquote><ul><li><code>$</code>：<code>以某某结尾</code>的量词，如<code>/abc$/</code>, 表示以<code>abc</code>结尾</li></ul></blockquote><pre><code class="javascript">let str = &#39;amabaaaaacccaaaddaa&#39;let reg = /dda$/console.log(reg.test(str)) // false</code></pre><hr><blockquote><ul><li><code>(?=)</code>：<code>修饰匹配</code>的量词，如<code>/\w\w(?=c)/</code>，表示匹配<code>后面紧跟c</code>的两位值</li></ul></blockquote><pre><code class="javascript">let str = &#39;abcmdcttksfec&#39;let reg = /\w\w(?=c)/gconsole.log(str.match(reg)) // [&quot;ab&quot;, &quot;md&quot;, &quot;fe&quot;]</code></pre><hr><blockquote><ul><li><code>(?&lt;=)</code>：<code>修饰匹配</code>的量词，如<code>/(?&lt;=c)\w\w/</code>，表示匹配<code>前面紧跟c</code>的两位值</li></ul></blockquote><pre><code class="javascript">let str = &#39;abcmdcttksfec&#39;let reg = /(?&lt;=c)\w\w/gconsole.log(str.match(reg)) // [&quot;md&quot;, &quot;tt&quot;]</code></pre><hr><blockquote><ul><li><code>(?!)</code>：<code>修饰匹配</code>的量词，如<code>/\w\w(?!c)/</code>，表示匹配后面<code>不紧跟c</code>的两位值</li></ul></blockquote><pre><code class="javascript">let str = &#39;abcmdcttksfec&#39;let reg = /\w\w(?!c)/gconsole.log(str.match(reg)) // [&quot;bc&quot;, &quot;dc&quot;, &quot;tt&quot;, &quot;ks&quot;, &quot;ec&quot;]</code></pre><hr><h3 id="贪婪与非贪婪模式"><a href="#贪婪与非贪婪模式" class="headerlink" title="贪婪与非贪婪模式"></a><code>贪婪</code>与<code>非贪婪</code>模式</h3><blockquote><p>1、贪婪模式：<code>正则的默认模式</code>：一般趋向于最大长度匹配。</p><p>2、非贪婪模式：反之，取最小长度匹配</p><p>3、如何区分：在<code>量词（* + ? {m,n}）后面</code>加上<code>?</code>号，就是<code>非贪婪模式</code></p></blockquote><pre><code class="javascript">const string = &#39;aabcaaabcccbabcabccab&#39;const regexp = /ab.*?cc/gconst regexp2 = /ab.*cc/gconsole.log(string.match(regexp)) // [ &#39;abcaaabcc&#39;, &#39;abcabcc&#39; ]console.log(string.match(regexp2)) // [ &#39;abcaaabcccbabcabcc&#39; ]</code></pre><hr><h3 id="正则中的复制：使用-1或-2或-3-配合-来实现"><a href="#正则中的复制：使用-1或-2或-3-配合-来实现" class="headerlink" title="正则中的复制：使用\1或\2或\3...配合()来实现"></a>正则中的<code>复制</code>：使用<code>\1</code>或<code>\2</code>或<code>\3...</code>配合<code>()</code>来实现</h3><blockquote><p><code>\1</code>会复制正则里，<code>第一</code>个<code>()</code>里面的值</p><p><code>\2</code>会复制正则里，<code>第二</code>个<code>()</code>里面的值</p><p><code>\3</code>会复制正则里，<code>第三</code>个<code>()</code>里面的值</p><p>…等等,以此类推</p></blockquote><pre><code class="javascript">// 如要取出字符串&quot;abcdababcdcdcdjjaaaa&quot;中`XOXO`这种类型的值const string = &quot;abcdababcdcdcdjjaaaa&quot;const regexp = /(\w)(\w)\1\2/gconsole.log(string.match(regexp)) // [ &#39;abab&#39;, &#39;cdcd&#39;, &#39;aaaa&#39; ]</code></pre><hr><h3 id="可以使用正则的方法有哪些"><a href="#可以使用正则的方法有哪些" class="headerlink" title="可以使用正则的方法有哪些"></a>可以使用正则的方法有哪些</h3><blockquote><pre><code class="javascript">let string = &#39;hello world!&#39;let regexp = /llo/g</code></pre><ul><li><code>regexp.test(string)</code>：返回布尔值，测试字符串<code>string</code>中是否有满足正则<code>regexp</code>的条件的字符串；</li><li><code>regexp.exec(string)</code>：匹配正则里的值，并返回匹配时，所匹配的这个值的索引位置，也就是说<code>exec</code>可以<code>指出</code>正则在字符串的哪个<code>位置</code>匹配到了值。</li></ul></blockquote><blockquote><pre><code class="javascript">console.log(regexp.exec(string)) // [&quot;llo&quot;, index: 2, input: &quot;hello world!&quot;, groups: undefined],</code></pre><ul><li><code>string.match(regexp)</code>：返回匹配出的字符串<code>数组</code>；</li><li><code>string.search(regexp)</code>：返回匹配到的字符串<code>位置（索引）</code>，没找到则返回<code>-1</code>；</li><li><code>string.split(regexp)</code>：以匹配的正则的值为分割符，来将字符串<code>分割成数组</code></li><li><code>string.replace(regexp, &#39;another string&#39;)</code>：以正则来查找字符串，并将找到的正则值，替换为指定的字符串<code>another string</code>，最后返回新的修改后的字符串（注意replace这个方法是返回一个新字符串，原字符串不会被修改）</li></ul><pre><code class="javascript">// string.replace()使用正则后，有两个特殊的地方// 1. #### 可以全局匹配console.log(string.replace(&#39;l&#39;,&#39;m&#39;)) // &#39;hemlo world!&#39;,可以看到，只会将第一个l替换成mregexp = /l/gconsole.log(string.replace(regexp,&#39;m&#39;)) // &#39;hemmo wormd!&#39;,可以看到，会将所有l都替换成了m,当然正则必须添加g修饰符// 2. #### 可以在第二个参数里获取到正则()里的匹配到的正则值，就和上面讲到正则里的复制里的\1或\2一样string = &#39;aabbwwyymmnn&#39; // 要求将所有的XXOO，替换成OOXXregexp = /(\w)\1(\w)\2/gconsole.log(string.replace(regexp,&#39;$2$2$1$1&#39;)) // bbaayywwnnmm// 或console.log(string.replace(regexp,($,$1,$2)=&gt; $2+$2+$1+$1)) // bbaayywwnnmm， 这种第二个参数是个回调函数的方式，更有实用价值一些， 回调函数里第一个形参$是`每次`正则匹配到的值，而第二个参数$1是正则里第一个子表达式(也就是正则里第一个小括号里)匹配到的值，第三个参数则是正则里第二个子表达式的匹配到的值。</code></pre></blockquote><h2 id="正则的使用实例"><a href="#正则的使用实例" class="headerlink" title="正则的使用实例"></a>正则的使用实例</h2><blockquote><ul><li>从字符串里：<code>首尾限定</code>来<code>选出需要的字符串</code></li></ul></blockquote><pre><code class="javascript">const mm = &#39;sfefaefhttps:www.chongly.com/sef/ff08fesfaef.jpg,asfeasi&#39;// 选出字符串里的图片const reg = /http.*?\.jpg/iconst result = mm.match(reg)[0] // 打印出 https:www.chongly.com/sef/ff08fesfaef.jpg</code></pre><blockquote><ul><li>将字符串里的中划线名字，改成小驼峰规则的名字，比如<code>font-size</code>替换成<code>fontSize</code></li></ul></blockquote><pre><code class="javascript">const string = &#39;font-size;margin-top&#39;const regexp = /-(\w)/g // 注意这里需要使用子表达式，便于在replace的第二个参数里获取匹配到的值console.log(string.replace(regexp, ($,$1) =&gt; $1.toUpperCase())) // 打印出 fontSize;marginTop</code></pre><blockquote><ul><li>将字符串里小驼峰规则的名字，改成中划线名字，比如<code>fontSize</code>替换成<code>font-size</code></li></ul></blockquote><pre><code class="javascript">const string = &#39;fontSize;marginTop&#39;const regexp = /[A-Z]/gconsole.log(string.replace(regexp, $ =&gt; &#39;-&#39; + $.toLowerCase())) // 打印出 font-size;margin-top</code></pre><blockquote><ol><li>将<code>数字</code>进行<code>科学计数法</code>, 如<code>65236544115</code>转成<code>65,236,544,115</code></li></ol></blockquote><pre><code class="javascript">// 方法一：复杂易懂篇const num = &#39;165236544115&#39;let str_reverse = num.split(&#39;&#39;).reverse().join(&#39;&#39;) // 将字符串颠倒const regexp = /(\d{3})(?!\b)/g // (?!\b)是防止最后一位后面也加上了,const num_out = str_reverse.replace(regexp,&#39;$1,&#39;)console.log(num_out.split(&#39;&#39;).reverse().join(&#39;&#39;)) // 将颠倒的字符串，再颠倒回来// 方法二：高端简洁篇const num2 = &#39;165236544115&#39;const regexp2 = /(?=(\B)(\d{3})+$)/gconsole.log(num2.replace(regexp2, &#39;,&#39;))</code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
          <category> regexp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
